apply plugin: "kotlin-multiplatform"

kotlin {

  targets {
    fromPreset(presets.jvm, 'jvm')
    fromPreset(presets.js, 'js') {
      compilations.all {
        tasks[compileKotlinTaskName].kotlinOptions {
          metaInfo = true
          sourceMap = true
          moduleKind = "commonjs"
          main = "call"
        }
      }
      
      fromPreset(presets.macosX64, 'native')


      fromPreset(presets.iosX64, 'nativeFx'){
        compilations.main.outputKinds 'framework'
      }
    }
  }

  sourceSets {

    commonMain {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
      }
    }

    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test-common'
        implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
      }
    }

    jvmMain {
      dependencies {
        implementation project(':common-jvm')
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
      }
    }

    jvmTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
        implementation 'org.jetbrains.kotlin:kotlin-test-junit'
      }
    }

    jsMain {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
        implementation 'org.jetbrains.kotlin:kotlin-test-js'
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlinx_coroutines_version"
      }
    }
  }
}


task packForXCode(type: Sync) {
  final File frameworkDir = new File(buildDir, "xcode-frameworks")
  final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

  inputs.property "mode", mode
  dependsOn kotlin.targets.nativeFx.compilations.main.linkTaskName("FRAMEWORK", mode)

  from { kotlin.targets.nativeFx.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
  into frameworkDir

  doLast {
    new File(frameworkDir, 'gradlew').with {
      text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
      setExecutable(true)
    }
  }
}
